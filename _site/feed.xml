<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenny Veens</title>
    <description>Jenny Veens is a Web Developer in Toronto, ON.</description>
    <link>http://jennyveens.com/</link>
    <atom:link href="http://jennyveens.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 23 Jun 2016 08:15:05 -0400</pubDate>
    <lastBuildDate>Thu, 23 Jun 2016 08:15:05 -0400</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Sass loops FTW</title>
        <description>&lt;p&gt;Lately I’ve been working on a project that has a fairly large color palette. The brand has 9 different colors and the main components for the site need to be available in every color. I was going through the sass files, and after lots and lots of scrolling, I decided that no, I can’t do this. &lt;em&gt;There must be a better way.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And so I will no longer be individually declaring variants for each color class because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Too time consuming.&lt;/li&gt;
  &lt;li&gt;NOT AT ALL D.R.Y.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There was a lot of this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.btn-primary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// some styles here
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.red&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.blue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.green&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// and so on ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;caption&quot;&gt;This might not look too bad, but now imagine 6 more color variants, hover styles, focus styles, active styles... !! Too much!&lt;/p&gt;

&lt;p&gt;Since we already had our colors stored as variables, I created another variable of all the colors, as well as their corresponding class name as a string:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$red&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#ff0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$blue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#0000ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#00ff00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// for all the colors....
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;red&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$red&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;blue&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$blue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;green&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$green&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By keeping the class name and the color variable together with parentheses, we could easily loop through them and use string interpolation to give us the values that we want:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.btn-primary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// base styles here
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$colors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;caption&quot;&gt;If you&#39;re familiar with Ruby, then you&#39;ve already experienced &#39;string interpolation&#39;. Interpolation takes whatever variable you&#39;re using between the hashtag-curly-brackets ( #{ } ) and spits out the value.&lt;/p&gt;

&lt;p&gt;So in the above example we get the same compiled code as if we wrote out all those class names manually. And as an extra bonus, if any one of those colors changes, or one has to be added or removed, all we have to do is update our $colors variable!&lt;/p&gt;

&lt;p&gt;That’s it! The code we have to write is reduced, our files are more readable and more manageable. WIN!&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://jennyveens.com/tutorial/2016/06/20/sass-loops-ftw.html</link>
        <guid isPermaLink="true">http://jennyveens.com/tutorial/2016/06/20/sass-loops-ftw.html</guid>
        
        <category>sass</category>
        
        <category>html/css</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Animating a three.js Mesh</title>
        <description>&lt;p&gt;This is Part 2 in getting up and running with three.js. In the last post we created a simple scene with just a white sphere on a black background. In this post we’re going to add a simple animation to our sphere. We’ll also change it’s appearance so we can better see the animation.&lt;/p&gt;

&lt;p&gt;Visit &lt;a href=&quot;/tutorial/2016/05/17/simple-scene-three-js.html&quot;&gt;Part 1&lt;/a&gt; if you want to see what we’ll be creating or to start from the beginning. If you’d like to pick up where we left off just download the finished Part 1 files below.&lt;/p&gt;

&lt;p class=&quot;download-link&quot;&gt;
&lt;a href=&quot;/assets/2016/05/three_js/downloads/part1/part_1_end.html&quot; download=&quot;three_js_part1_end.html&quot;&gt;Download Part 1 files&lt;/a&gt;
&lt;/p&gt;

&lt;figure&gt;
	&lt;canvas id=&quot;part1&quot;&gt;&lt;/canvas&gt;
	&lt;figcaption&gt;Our starting point - the finished result of Part 1&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In this example we’re working with a Basic three.js material. Basic material does not reflect light - that’s why our white sphere just looks like a flat circle. We can still change the color of our material by passing it a color, and give it some depth by setting wireframe to true. These values can either be passed when the material is created, or by calling setValue() on the material and passing it an object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;	&lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xDDA0DD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
		&lt;span class=&quot;na&quot;&gt;wireframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
		&lt;span class=&quot;na&quot;&gt;wireframeLinewidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;
	&lt;canvas id=&quot;part2&quot;&gt;&lt;/canvas&gt;
	&lt;figcaption&gt;Basic Material with updated color and wireframe values.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To animate the mesh, we’ll use requestAnimationFrame to rotate our mesh on it’s x and y axis. This function will call itself so it plays continuously. At the end of the function we will re-render the scene with the updated values:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;
	&lt;canvas id=&quot;part3&quot;&gt;&lt;/canvas&gt;
	&lt;figcaption&gt;Spin, my little sphere. SPIN!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Finally, update the background color to whatever you like by setting the renderer clear color.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setClearColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7FFFD4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;
	&lt;canvas id=&quot;part4&quot;&gt;&lt;/canvas&gt;
	&lt;figcaption&gt;Finished - Our colorful little scene.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;download-link&quot;&gt;
&lt;a href=&quot;/assets/2016/05/three_js/downloads/part2/part_2_end.html&quot; download=&quot;three_js_part2_end.html&quot;&gt;Download Part 2 completed&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Any questions? Let me know below or tweet me! &lt;a href=&quot;https://twitter.com/jennyveens&quot;&gt;@jennyveens&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/r76/three.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
	var PartOne = {};
	var width2;

	PartOne.camera;
	PartOne.scene;
	PartOne.renderer;
	PartOne.geometry;
	PartOne.material;
	PartOne.mesh;

	console.log(Date.now());

	PartOne.init = function () {

		var my_canvas = document.getElementById(&#39;part1&#39;);

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		PartOne.renderer = new THREE.WebGLRenderer( { canvas: my_canvas } );
		PartOne.renderer.setSize( width2, window.innerHeight/2 );
		PartOne.renderer.setClearColor( 0x000000 );

		PartOne.camera = new THREE.PerspectiveCamera( 75, width2 / (window.innerHeight/2), 1, 2000 );
		PartOne.camera.position.z = 800;

		PartOne.scene = new THREE.Scene();

		PartOne.geometry = new THREE.SphereGeometry( 300, 15, 10 );
		PartOne.material = new THREE.MeshBasicMaterial();

		PartOne.mesh = new THREE.Mesh( PartOne.geometry, PartOne.material );
		
		PartOne.scene.add( PartOne.mesh );

		PartOne.renderer.render( PartOne.scene, PartOne.camera );
	}

	PartOne.init();
	// PartOne.animate();

	PartOne.debounce = function(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate &amp;&amp; !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};

	PartOne.canvasSize = PartOne.debounce(function() {
		// All the taxing stuff you do

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		PartOne.camera.aspect = width2 / ( window.innerHeight/2 ) ;
		PartOne.camera.updateProjectionMatrix();

		console.log(&#39;PartOne&#39;, PartOne.camera.aspect );

		PartOne.renderer.setSize( width2, window.innerHeight/2 );
		PartOne.renderer.render( PartOne.scene, PartOne.camera );

	}, 250);

	var PartTwo = {};

	PartTwo.camera;
	PartTwo.scene;
	PartTwo.renderer;
	PartTwo.geometry;
	PartTwo.material;
	PartTwo.mesh;

	PartTwo.init = function () {

		var my_canvas = document.getElementById(&#39;part2&#39;);

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		PartTwo.renderer = new THREE.WebGLRenderer( { canvas: my_canvas } );
		PartTwo.renderer.setSize( width2, window.innerHeight/2 );
		PartTwo.renderer.setClearColor( 0x000000 );

		PartTwo.camera = new THREE.PerspectiveCamera( 75, width2 / (window.innerHeight/2), 1, 2000 );
		PartTwo.camera.position.z = 800;

		PartTwo.scene = new THREE.Scene();

		PartTwo.geometry = new THREE.SphereGeometry( 300, 15, 10 );
		PartTwo.material = new THREE.MeshBasicMaterial();

		PartTwo.material.setValues({
			color: 0xDDA0DD, 
			wireframe: true, 
			wireframeLinewidth: 2
		});

		PartTwo.mesh = new THREE.Mesh( PartTwo.geometry, PartTwo.material );
		
		PartTwo.scene.add( PartTwo.mesh );

		PartTwo.renderer.render( PartTwo.scene, PartTwo.camera );
	}

	PartTwo.init();
	// PartTwo.animate();

	PartTwo.debounce = function(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate &amp;&amp; !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};

	PartTwo.canvasSize = PartTwo.debounce(function() {
		// All the taxing stuff you do

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		PartTwo.camera.aspect = width2 / ( window.innerHeight/2 ) ;
		PartTwo.camera.updateProjectionMatrix();

		console.log(&#39;PartTwo&#39;, PartTwo.camera.aspect );

		PartTwo.renderer.setSize( width2, window.innerHeight/2 );
		PartTwo.renderer.render( PartTwo.scene, PartTwo.camera );

	}, 250);

	var PartThree = {};

	PartThree.camera;
	PartThree.scene;
	PartThree.renderer;
	PartThree.geometry;
	PartThree.material;
	PartThree.mesh;

	PartThree.init = function () {

		var my_canvas = document.getElementById(&#39;part3&#39;);

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		PartThree.renderer = new THREE.WebGLRenderer( { canvas: my_canvas } );
		PartThree.renderer.setSize( width2, window.innerHeight/2 );
		PartThree.renderer.setClearColor( 0x000000 );

		PartThree.camera = new THREE.PerspectiveCamera( 75, width2 / (window.innerHeight/2), 1, 2000 );
		PartThree.camera.position.z = 800;

		PartThree.scene = new THREE.Scene();

		PartThree.geometry = new THREE.SphereGeometry( 300, 15, 10 );
		PartThree.material = new THREE.MeshBasicMaterial();

		PartThree.material.setValues({
			color: 0xDDA0DD, 
			wireframe: true, 
			wireframeLinewidth: 2
		});

		PartThree.mesh = new THREE.Mesh( PartThree.geometry, PartThree.material );
		
		PartThree.scene.add( PartThree.mesh );

		PartThree.renderer.render( PartThree.scene, PartThree.camera );
	}


	PartThree.animate = function() {

		requestAnimationFrame( PartThree.animate );

		PartThree.mesh.rotation.x = Date.now() * 0.0002;
		PartThree.mesh.rotation.y = Date.now() * 0.001;

		PartThree.renderer.render( PartThree.scene, PartThree.camera );

	}

	PartThree.init();
	PartThree.animate();

	PartThree.debounce = function(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate &amp;&amp; !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};

	PartThree.canvasSize = PartThree.debounce(function() {
		// All the taxing stuff you do

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		PartThree.camera.aspect = width2 / ( window.innerHeight/2 ) ;
		PartThree.camera.updateProjectionMatrix();

		console.log(&#39;PartThree&#39;, PartThree.camera.aspect );

		PartThree.renderer.setSize( width2, window.innerHeight/2 );
		PartThree.renderer.render( PartThree.scene, PartThree.camera );

	}, 250);

	var PartFour = {};
	var width2;

	PartFour.camera;
	PartFour.scene;
	PartFour.renderer;
	PartFour.geometry;
	PartFour.material;
	PartFour.mesh;

	console.log(Date.now());

	PartFour.init = function () {

		var my_canvas = document.getElementById(&#39;part4&#39;);

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		PartFour.renderer = new THREE.WebGLRenderer( { canvas: my_canvas } );
		PartFour.renderer.setSize( width2, window.innerHeight/2 );
		PartFour.renderer.setClearColor( 0x7FFFD4 );

		PartFour.camera = new THREE.PerspectiveCamera( 75, width2 / (window.innerHeight/2), 1, 2000 );
		PartFour.camera.position.z = 800;

		PartFour.scene = new THREE.Scene();

		PartFour.geometry = new THREE.SphereGeometry( 300, 15, 10 );
		PartFour.material = new THREE.MeshBasicMaterial();

		PartFour.material.setValues({
			color: 0xDDA0DD, 
			wireframe: true, 
			wireframeLinewidth: 2
		});

		PartFour.mesh = new THREE.Mesh( PartFour.geometry, PartFour.material );
		
		PartFour.scene.add( PartFour.mesh );

		PartFour.renderer.render( PartFour.scene, PartFour.camera );
	}

	PartFour.animate = function() {

		requestAnimationFrame( PartFour.animate );

		PartFour.mesh.rotation.x = Date.now() * 0.0002;
		PartFour.mesh.rotation.y = Date.now() * 0.001;

		PartFour.renderer.render( PartFour.scene, PartFour.camera );

	}

	PartFour.init();
	PartFour.animate();

	PartFour.debounce = function(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate &amp;&amp; !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};

	PartFour.canvasSize = PartFour.debounce(function() {
		// All the taxing stuff you do

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		PartFour.camera.aspect = width2 / ( window.innerHeight/2 ) ;
		PartFour.camera.updateProjectionMatrix();

		console.log(&#39;PartFour&#39;, PartFour.camera.aspect );

		PartFour.renderer.setSize( width2, window.innerHeight/2 );
		PartFour.renderer.render( PartFour.scene, PartFour.camera );

	}, 250);

	window.addEventListener(&#39;resize&#39;, PartThree.canvasSize);

	window.addEventListener(&#39;resize&#39;, PartFour.canvasSize);

	window.addEventListener(&#39;resize&#39;, PartTwo.canvasSize);

	window.addEventListener(&#39;resize&#39;, PartOne.canvasSize);

&lt;/script&gt;

</description>
        <pubDate>Mon, 23 May 2016 00:35:50 -0400</pubDate>
        <link>http://jennyveens.com/tutorial/2016/05/23/animating-geometry-three-js.html</link>
        <guid isPermaLink="true">http://jennyveens.com/tutorial/2016/05/23/animating-geometry-three-js.html</guid>
        
        <category>three.js</category>
        
        <category>javascript</category>
        
        <category>animation</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Creating a scene with three.js</title>
        <description>&lt;p&gt;Three.js is a super cool library that lets us create 3D objects and scenes in the browser. I’ve been really excited about using it since I started working in web development. My goal here is to go over the basics, so that you can get started with three.js today (And build more cool stuff in the future!).&lt;/p&gt;

&lt;p class=&quot;download-link&quot;&gt;
&lt;a href=&quot;/assets/2016/05/three_js/downloads/part1/part_1_start.html&quot; download=&quot;three_js_part1_start.html&quot;&gt;Download the starter files&lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;what-well-be-building&quot;&gt;WHAT WE’LL BE BUILDING:&lt;/h3&gt;
&lt;p&gt;We’re going to start out with three.js by building a simple scene. 
In this scene is going to be a wireframe sphere that spins:&lt;/p&gt;

&lt;figure&gt;
	&lt;canvas id=&quot;demo&quot;&gt;&lt;/canvas&gt;
	&lt;figcaption&gt;&lt;a target=&quot;_blank&quot; href=&quot;/assets/2016/05/three_js/demos/three_js_simple_scene_demo.html&quot;&gt;View fullscreen&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I’ve split up this tutorial to make it a bit easier to follow:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Part 1 will be about creating a scene and placing the object in the scene&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;/tutorial/2016/05/23/animating-geometry-three-js.html&quot;&gt;&lt;strong&gt;- Part 2 will be about styling and animating the scene&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;lets-get-started&quot;&gt;LETS GET STARTED&lt;/h3&gt;

&lt;p&gt;To create this scene there are only 4 things we need:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A Renderer (Canvas element)&lt;/li&gt;
  &lt;li&gt;A Scene&lt;/li&gt;
  &lt;li&gt;A Camera&lt;/li&gt;
  &lt;li&gt;A mesh (Object to view)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I like to think of working in three.js as creating a movie. We need our actors (mesh objects), a camera to film with, and a scene where the action takes place. And then for a viewer to see what we’ve created, they need something to view it with. In real life this could be a television, theatre, or computer, but here we’re going to use an HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;To start, let’s create our markup. We need a regular HTML document, with a canvas element. And we need to include &lt;a href=&quot;http://threejs.org&quot;&gt;three.js&lt;/a&gt;. You can either download the files &lt;a href=&quot;http://threejs.org/docs/index.html#Manual/Introduction/Creating_a_scene&quot;&gt;here&lt;/a&gt;, or include it with a cdn:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/r76/three.min.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As of writing this, three.js is in version 76, you can grab the most up to date version &lt;a href=&quot;https://cdnjs.com/libraries/three.js/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Markup:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Simple three.js scene&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/r76/three.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Our code will go here&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re going to put our JavaScript in the empty script tag. And don’t add in a canvas element quite yet! We’ll be creating it with our JavaScript:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// First let&#39;s define the variables we&#39;ll need: &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to initialize our scene, we must first create the things we need, we’ll do this by creating our renderer, camera, scene, and mesh inside of an init() function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a new Renderer element (this will be our canvas)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WebGLRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Then we&#39;ll set it so that it takes up the entire viewport&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHeight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Now let&#39;s add our renderer to our document&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domElement&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once our renderer is in place, we can create our scene and camera. The camera accepts 4 arguments:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Field of view&lt;/li&gt;
  &lt;li&gt;The aspect ratio
 Determines how our camera will play on our renderer. Usually this will be the width/height so the image is not squished.&lt;/li&gt;
  &lt;li&gt;Near clipping plane
 How far away will we start viewing the scene.&lt;/li&gt;
  &lt;li&gt;Far clipping place
 How far away will we stop viewing the scene.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Inside init();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PerspectiveCamera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unless we specify it, the postition of our objects will be placed at (0,0,0) - That’s (x,y,z). Let’s position our camera to ensure it’s outside of our object (Very difficult to view our object when our camera is inside!):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Inside init();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Set the position of the camera to be 800 on the z-axis&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that our camera is set up, lets add our object.
An object needs the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Geometry - This tells our object what shape it should take.&lt;/li&gt;
  &lt;li&gt;Material - What our shape should look like.&lt;/li&gt;
  &lt;li&gt;Mesh - This combines our geometry and material so we can add it to the scene.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Inside init()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SphereGeometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;wireframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;wireframeLinewidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we need to render the scene:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderOnPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have our functions in place, we just need to call them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;renderOnPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see something very similar to what is displayed below:&lt;/p&gt;

&lt;figure&gt;
	&lt;canvas id=&quot;part1&quot;&gt;&lt;/canvas&gt;
	&lt;figcaption&gt;End result of Part 1&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If you don’t see a white sphere on a black background, feel free to &lt;a href=&quot;/assets/2016/05/three_js/downloads/part1/part_1_end.html&quot; download=&quot;three_js_part1_end.html&quot;&gt;download the finished file&lt;/a&gt; and compare code.&lt;/p&gt;

&lt;p&gt;This might not look like much, but it’s a great start to putting together the pieces of three.js. In the next part, I’ll show you how to style the sphere, and how to make it spin!&lt;/p&gt;

&lt;!-- ON TO PART 2 --&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/r76/three.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;

	// var camera, scene, ratio, renderer, width;
	// var geometry, material, mesh;

	var Demo = {};
	var width;

	Demo.camera;
	Demo.scene;
	Demo.renderer;
	Demo.geometry;
	Demo.material;
	Demo.mesh;

	Demo.init = function () {

		var my_canvas = document.getElementById(&#39;demo&#39;);

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width = 660;
		} else if (window.innerWidth &lt;= 400) {
			width = window.innerWidth - 60;
		} else {
			width = window.innerWidth - 120;
		}

		Demo.renderer = new THREE.WebGLRenderer( { canvas: my_canvas } );
		Demo.renderer.setSize( width, window.innerHeight/2 );
		Demo.renderer.setClearColor( 0x7FFFD4 );

		Demo.camera = new THREE.PerspectiveCamera( 75, width / (window.innerHeight/2), 1, 2000 );
		Demo.camera.position.z = 800;

		Demo.scene = new THREE.Scene();

		Demo.geometry = new THREE.SphereGeometry( 300, 15, 10 );
		Demo.material = new THREE.MeshBasicMaterial( { color: 0xDDA0DD, wireframe: true, wireframeLinewidth: 2 } );

		Demo.mesh = new THREE.Mesh( Demo.geometry, Demo.material );
		
		Demo.scene.add( Demo.mesh );
	}

	Demo.animate = function() {

		requestAnimationFrame( Demo.animate );

		Demo.mesh.rotation.x = Date.now() * 0.0002;
		Demo.mesh.rotation.y = Date.now() * 0.001;

		Demo.renderer.render( Demo.scene, Demo.camera );

	}

	Demo.init();
	Demo.animate();

	Demo.debounce = function(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate &amp;&amp; !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};

	Demo.canvasSize = Demo.debounce(function() {
		// All the taxing stuff you do

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		
		Demo.camera.aspect = width / ( window.innerHeight/2 ) ;
		Demo.camera.updateProjectionMatrix();

		console.log(&#39;Demo&#39;, Demo.camera.aspect );

		Demo.renderer.setSize( width, window.innerHeight/2 );

	}, 250);

	var PartOne = {};
	var width2;

	PartOne.camera;
	PartOne.scene;
	PartOne.renderer;
	PartOne.geometry;
	PartOne.material;
	PartOne.mesh;

	PartOne.init = function () {

		var my_canvas = document.getElementById(&#39;part1&#39;);

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		PartOne.renderer = new THREE.WebGLRenderer( { canvas: my_canvas } );
		PartOne.renderer.setSize( width2, window.innerHeight/2 );
		PartOne.renderer.setClearColor( 0x000000 );

		PartOne.camera = new THREE.PerspectiveCamera( 75, width2 / (window.innerHeight/2), 1, 2000 );
		PartOne.camera.position.z = 800;

		PartOne.scene = new THREE.Scene();

		PartOne.geometry = new THREE.SphereGeometry( 300, 15, 10 );
		PartOne.material = new THREE.MeshBasicMaterial();

		PartOne.mesh = new THREE.Mesh( PartOne.geometry, PartOne.material );
		
		PartOne.scene.add( PartOne.mesh );

		PartOne.renderer.render( PartOne.scene, PartOne.camera );
	}

	PartOne.init();
	// PartOne.animate();

	PartOne.debounce = function(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate &amp;&amp; !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};

	PartOne.canvasSize = PartOne.debounce(function() {
		// All the taxing stuff you do

		if ( (window.innerWidth - 120) &gt; 660 ) {
			width2 = 660;
		} else if (window.innerWidth &lt; 400) {
			width2 = window.innerWidth - 60;
		} else {
			width2 = window.innerWidth - 120;
		}

		PartOne.camera.aspect = width2 / ( window.innerHeight/2 ) ;
		PartOne.camera.updateProjectionMatrix();

		console.log(&#39;PartOne&#39;, PartOne.camera.aspect );

		PartOne.renderer.setSize( width2, window.innerHeight/2 );
		PartOne.renderer.render( PartOne.scene, PartOne.camera );

	}, 250);

	window.addEventListener(&#39;resize&#39;, PartOne.canvasSize);
	window.addEventListener(&#39;resize&#39;, Demo.canvasSize);
&lt;/script&gt;

</description>
        <pubDate>Tue, 17 May 2016 00:35:50 -0400</pubDate>
        <link>http://jennyveens.com/tutorial/2016/05/17/simple-scene-three-js.html</link>
        <guid isPermaLink="true">http://jennyveens.com/tutorial/2016/05/17/simple-scene-three-js.html</guid>
        
        <category>three.js</category>
        
        <category>javascript</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Outskirts</title>
        <description>&lt;p class=&quot;download-link&quot;&gt;
	&lt;a target=&quot;_blank&quot; href=&quot;http://fromtheoutskirts.com&quot;&gt;View the live site&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Outskirts has been built on the ethos that true understanding begins with genuine curiosity. Founded in 2015 by Shawn Topp, Shawn knew he wanted a site that explored this curiosity. So we set out to build a site that would spark the users curiosity and make them want to explore as much as we did.&lt;/p&gt;

&lt;p&gt;The site is a custom WordPress build, with HTML5 and CSS animations sprinkled in. The posts were made to be flexible, and the layout for each can be adjusted by selecting different modules.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://jennyveens.com/assets/2016/01/fromtheoutskirts/main.png&quot; alt=&quot;The main site view.&quot; /&gt;
    &lt;figcaption&gt;The initial page of the site is simple, showcasing the Outskirts logo.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://jennyveens.com/assets/2016/01/fromtheoutskirts/atom.png&quot; alt=&quot;An animated atom.&quot; /&gt;
    &lt;figcaption&gt;We went back to math class for this atom. Trigonometry played a big role, not only in drawing the ellipses, but also in making the electrons follow their paths.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://jennyveens.com/assets/2016/01/fromtheoutskirts/nav-bar.png&quot; alt=&quot;A view of the off-canvas navigation.&quot; /&gt;
    &lt;figcaption&gt;The off-canvas navigation is simple but does not allow you to scroll around the page while it is open.&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        <pubDate>Wed, 20 Jan 2016 20:35:50 -0500</pubDate>
        <link>http://jennyveens.com/project/2016/01/20/fromtheoutskirts.html</link>
        <guid isPermaLink="true">http://jennyveens.com/project/2016/01/20/fromtheoutskirts.html</guid>
        
        <category>wordpress</category>
        
        <category>development</category>
        
        <category>javascript</category>
        
        <category>animation</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>flashlight.js</title>
        <description>&lt;p class=&quot;download-link&quot;&gt;
	&lt;a target=&quot;_blank&quot; href=&quot;https://jveens.github.io/flashlight&quot;&gt;View the live site&lt;/a&gt;
	&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/jveens/flashlight&quot;&gt;Check it out on Github&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Flashlight.js is an interactive jquery plugin that lets you turn out the lights on your website!&lt;/p&gt;

&lt;p&gt;The plugin adds a light-switch to your page so you can turn down the lights. The options are fully customizable and include an optional gremlin to lurk around your page when the lights are out. Watch out!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://jennyveens.com/assets/2015/03/flashlight/lights-on.png&quot; alt=&quot;The main app view&quot; /&gt;
    &lt;figcaption&gt;Flashlight.js - Hide &amp;amp; Go Seek for your website.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://jennyveens.com/assets/2015/03/flashlight/lights-off.png&quot; alt=&quot;Look out when the lights go out!&quot; /&gt;
    &lt;figcaption&gt;Look out when the lights go out!&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        <pubDate>Sun, 15 Mar 2015 21:35:50 -0400</pubDate>
        <link>http://jennyveens.com/project/2015/03/15/flashlight-plugin.html</link>
        <guid isPermaLink="true">http://jennyveens.com/project/2015/03/15/flashlight-plugin.html</guid>
        
        <category>jquery</category>
        
        <category>javascript</category>
        
        <category>development</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Hey Bartender</title>
        <description>&lt;p class=&quot;download-link&quot;&gt;
	&lt;a target=&quot;_blank&quot; href=&quot;https://jveens.github.io/heybartender&quot;&gt;View the live site&lt;/a&gt;
	&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/jveens/heybartender&quot;&gt;Check it out on Github&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;‘Hey Bartender!’ is a signature drink generator, created to take the guesswork out of providing guests with a suitable and delicious cocktail.&lt;/p&gt;

&lt;p&gt;This site uses &lt;a target=&quot;blank&quot; href=&quot;http://addb.absolutdrinks.com/docs/&quot;&gt;Absolute Vodka’s API&lt;/a&gt; to match a base spirit and flavor profile to a list of potential cocktails. One of these cocktails is chosen and served up to the user.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://jennyveens.com/assets/2015/03/heybartender/main.png&quot; alt=&quot;The main app view&quot; /&gt;
    &lt;figcaption&gt;The App welcome screen - no minors allowed.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://jennyveens.com/assets/2015/03/heybartender/drink.png&quot; alt=&quot;A cocktail served up by Hey Bartender!&quot; /&gt;
    &lt;figcaption&gt;Hey Bartender! Get me a drink, please.&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        <pubDate>Sun, 01 Mar 2015 20:35:50 -0500</pubDate>
        <link>http://jennyveens.com/project/2015/03/01/hey-bartender.html</link>
        <guid isPermaLink="true">http://jennyveens.com/project/2015/03/01/hey-bartender.html</guid>
        
        <category>APIs</category>
        
        <category>javascript</category>
        
        <category>design</category>
        
        <category>development</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>How To: Reveal on Hover &amp;lt;div&amp;gt;</title>
        <description>&lt;p&gt;&lt;em&gt;This article originally posted on &lt;a href=&quot;https://medium.com/@jennyveens/how-to-reveal-on-hover-div-63e18a6158b8#.cxzwryuj0&quot;&gt;Medium&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;View Demo here: &lt;a href=&quot;http://codepen.io/jennyveens/full/bNopLb/&quot;&gt;Reveal On Hover &amp;lt;div&amp;gt; (Codepen)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a recent project I was tasked with the challenge of flexing my ‘absolute positioning’ muscle(s). I felt as though having some element floating on the screen (other then the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;) would muss up the design and make it obvious it didn’t belong…
I knew I wanted to include a ‘Reveal-On-Hover’ (ROH) &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or two. Once I started exploring this effect, I found out it was created with absolutely positioned elements. BAM!, BAM !— Two birds, one stone.
Here’s a look at the finished effect (Check out the full code on CodePen):&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://jennyveens.com/assets/2015/02/reveal-on-hover/hover-1.png&quot; alt=&quot;The navbar with minimal styling&quot; /&gt;
    &lt;figcaption&gt;Initial state: Faded out background, greyed text.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://jennyveens.com/assets/2015/02/reveal-on-hover/hover-2.png&quot; alt=&quot;The navbar with minimal styling&quot; /&gt;
    &lt;figcaption&gt;Hover state (middle &amp;lt;div&amp;gt;): Coloured background and text.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This effect is high-impact, and not that difficult to achieve. To accomplish it, we layer &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;divs&amp;gt;&lt;/code&gt; using z-index and some ::before pseudo-element wizardry.
Here is what you need to create your hover &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:
A container &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.
And then inside your container put an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; enclosed by an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.
Also in the container &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; insert another &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to hold the background.
And one last &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to hold the text.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;divLink&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#link&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- end of .text --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- end of .container --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We want to arrange the elements of the container to make our ROH &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. Starting from the top, this is what we need:
The link (if it gets stuck under another element, we can’t click it).
The text.
The background::before (this appears as the overlay on our background, we’ll turn the opacity from 90% to 10% create the reveal effect).
The background.
Now for the CSS:
Since our container &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; will be the basis for the position of all other elements, let’s go ahead and make it relative and set the width:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;33.3333%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nl&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next up is the full-div link. We know we want it to take up the entire space of the div, so let’s use that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; to make it happen:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.divLink&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We want to pretty much repeat this on the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containing the background to ensure that the background also takes up the entire space of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. Be sure to include background-size: cover; so that the image doesn’t look zoomed-in.
Also, this is the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; we want on the bottom of our stack, so give it a low z-index. This is also where we want to make all the CSS transition magic happen, so let’s set that too:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(images/...)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;background&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, let’s include the overlay. We’ll do this with a ::before pseudo-element. The z-index has to be greater than that of the background, but less than that of the link:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.background&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, style your text &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; however you like. Be sure to set position: relative and the z-index between your ::before element and your link element. The text doesn’t have to be grey in the inital state, but mine will be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;silver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, let’s add in the hover states. We want the background opacity to decrease, and the font color to change:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.background&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goldenRod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;p&gt;Please let me know if you have any questions by leaving a comment below, or you can get me on Twitter &lt;a href=&quot;https://twitter.com/jennyveens&quot;&gt;@jennyveens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out the full code on &lt;a href=&quot;http://codepen.io/jennyveens/full/bNopLb/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Feb 2015 20:35:50 -0500</pubDate>
        <link>http://jennyveens.com/tutorial/2015/02/02/reveal-on-hover-div.html</link>
        <guid isPermaLink="true">http://jennyveens.com/tutorial/2015/02/02/reveal-on-hover-div.html</guid>
        
        <category>html/css</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>How To: Peekaboo Nav Bar</title>
        <description>&lt;p&gt;&lt;em&gt;This article originally posted on &lt;a href=&quot;https://medium.com/@jennyveens/how-to-peekaboo-nav-bar-6f795c17b3b7#.b5rn6lkk3&quot;&gt;Medium&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;View Demo here: &lt;a href=&quot;http://codepen.io/jennyveens/pen/GgEdpy&quot;&gt;Peekaboo Nav Bar (Codepen)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This week at HackerYou we tackled HTML5 and CSS3.
As our first project, we were tasked with coding a one-page website from scratch. Having already completed a similar task before the course started, I wanted to incorporate some effects I’ve never used before. As soon as I saw THIS nav bar, I knew I wanted to make it my own.&lt;/p&gt;

&lt;p&gt;Upon inspecting the nav bar element, I was found that they used a little trick here: They made a slice of the top of the image in fit into the nav bar that seamlessly blended with the header image. This image could then be applied as a nav bar background to be revealed when a nav link was hovered.
Not wanting to deal with precisely creating a slice of my header image (too much math!), I was determined to find another way. My first thought was this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I quickly realized this wouldn’t work, as the background on a:hover would simply reveal the transparent black background on the nav.&lt;/p&gt;

&lt;p&gt;In order to make this happen, I had to ensure that there were no backgrounds between the image I wanted to reveal and the nav elements that would show through on hover.
I started by splitting the nav into 2 sections: one for the Company name, and another for the actual nav bar. By floating these 2 elements side by side, I would give the illusion of a full-bleed nav. The nav li were then divided into 4 equal sections.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;55%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.companyName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;45%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s a look at the nav before I edit down the padding on the Company name h2:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http://jennyveens.com/assets/2015/01/peek-a-boo-nav/nav-bar-1.png&quot; alt=&quot;The navbar with minimal styling&quot; /&gt;
	&lt;figcaption&gt;Here we can clearly see that our ‘nav bar’ is really made up of 2 separate elements.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The then edited the padding on the .companyName, and jacked up the padding on the left side to make it look like margin: 0 auto was centering it on the page. Now it looks more like this:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http://jennyveens.com/assets/2015/01/peek-a-boo-nav/nav-bar-2.png&quot; alt=&quot;Navbar with centered left side, uneven right side.&quot; /&gt;
	&lt;figcaption&gt;Things are looking better - but it&#39;s a bit lopsided.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Things are looking better — using padding to push in the h2 gives the appearance of centering on the page.
I wanted to push in the right side a bit as well, no one likes a lop-sided webpage!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finished nav bar with a ‘margin: 0 auto’ appearance.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http://jennyveens.com/assets/2015/01/peek-a-boo-nav/nav-bar-3.png&quot; alt=&quot;The finished navbar!&quot; /&gt;
	&lt;figcaption&gt;The finished navbar!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http://jennyveens.com/assets/2015/01/peek-a-boo-nav/nav-bar-4.png&quot; alt=&quot;Finished navbar with a demo hover.&quot; /&gt;
	&lt;figcaption&gt;Finished navbar with a transparent hovered link.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Finished nav bar with a hovered link.
Ta-da! All done.&lt;/p&gt;

&lt;p&gt;Check out the full code here: &lt;a href=&quot;http://codepen.io/jennyveens/pen/GgEdpy&quot;&gt;Peekaboo Nav Bar (Codepen)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions, get at me on twitter &lt;a href=&quot;https://twitter.com/jennyveens&quot;&gt;@jennyveens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a better way of achieving this effect? I’d love to see it! Please share it in the comments ☺&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Jan 2015 20:35:50 -0500</pubDate>
        <link>http://jennyveens.com/tutorial/2015/01/25/peek-a-boo-nav.html</link>
        <guid isPermaLink="true">http://jennyveens.com/tutorial/2015/01/25/peek-a-boo-nav.html</guid>
        
        <category>html/css</category>
        
        
        <category>tutorial</category>
        
      </item>
    
  </channel>
</rss>
